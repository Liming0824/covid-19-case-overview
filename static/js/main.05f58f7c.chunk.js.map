{"version":3,"sources":["logo.svg","Chart.js","serviceWorker.js","index.js"],"names":["module","exports","margin","Chart","chroma","scale","state","hights","lows","xScale","d3","range","yScale","width","xAxis","tickFormat","yAxis","d","lineGenerator","curve","nextProps","data","timeDomain","date","tempMax","hight","this","domain","x","y","low","setState","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,yKCQrCC,G,MAA0B,GAA1BA,EAA+C,GAiDtCC,GA7CAC,IAAOC,MAAM,CADf,UADC,UADF,Y,4MAMRC,MAAQ,CACNC,OAAQ,KACRC,KAAM,M,EAGRC,OAASC,MAAeC,MAAM,CAACT,EAdrB,IAc0CA,I,EACpDU,OAASF,MAAiBC,MAAM,CAAC,EAAGE,M,EACpCC,MAAQJ,MAAgBL,MAAM,EAAKI,QAAQM,WAAWL,IAAc,O,EACpEM,MAAQN,MAAcL,MAAM,EAAKO,QAAQG,YAAW,SAAAE,GAAC,gBAAOA,EAAP,Y,EACrDC,cAAgBR,MAAUS,MAAMT,K,EAChCQ,cAAgBR,MAAUS,MAAMT,K,wEAENU,GAAW,IAAD,OAC3BC,EAAQD,EAARC,KACP,GAAIA,EAAJ,CAEA,IAAMC,EAAaZ,IAAUW,GAAM,SAAAJ,GAAC,OAAIA,EAAEM,QACpCC,EAAUd,IAAOW,GAAM,SAAAJ,GAAC,OAAIA,EAAEQ,SACpCC,KAAKjB,OAAOkB,OAAOL,GACnBI,KAAKd,OAAOe,OAAO,CAAC,EAAGH,IACvBE,KAAKR,cAAcU,GAAE,SAAAX,GAAC,OAAI,EAAKR,OAAOQ,EAAEM,SACxCG,KAAKR,cAAcW,GAAE,SAAAZ,GAAC,OAAI,EAAKL,OAAOK,EAAEQ,UACxC,IAAIlB,EAASmB,KAAKR,cAAcG,GAEhCK,KAAKR,cAAcW,GAAE,SAAAZ,GAAC,OAAI,EAAKL,OAAOK,EAAEa,QACxC,IAAItB,EAAOkB,KAAKR,cAAcG,GAC9BK,KAAKK,SAAS,CAACxB,SAAQC,Y,+BAMzB,OACE,kC,GAlCcwB,cCFAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,WDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.05f58f7c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport * as d3 from 'd3';\nimport chroma from 'chroma-js';\nimport './Chart.css';\n\nconst width = 650;\nconst height = 400;\nconst margin = {top: 20, right: 5, bottom: 20, left: 35};\nconst red = '#eb6a5b';\nconst green = '#b6e86f';\nconst blue = '#52b6ca';\nconst colors = chroma.scale([blue, green, red]);\n\nclass Chart extends Component{\n    state = {\n      hights: null,\n      lows: null,\n    }\n\n    xScale = d3.scaleTime().range([margin.left, width - margin.right]);\n    yScale = d3.scaleLinear().range([0, width/2]);\n    xAxis = d3.axisBottom().scale(this.xScale).tickFormat(d3.timeFormat('%d'));\n    yAxis = d3.axisLeft().scale(this.yScale).tickFormat(d => `${d}Â°F`)\n    lineGenerator = d3.line().curve(d3.curveCardinal);\n    lineGenerator = d3.line().curve(d3.curveCardinal);\n\n    componentWillReceiveProps(nextProps){\n      const {data} = nextProps;\n      if(!data){return;}\n\n      const timeDomain = d3.extent(data, d => d.date);\n      const tempMax = d3.max(data, d => d.hight);\n      this.xScale.domain(timeDomain);\n      this.yScale.domain([0, tempMax]);\n      this.lineGenerator.x(d => this.xScale(d.date))\n      this.lineGenerator.y(d => this.yScale(d.hight));\n      let hights = this.lineGenerator(data);\n\n      this.lineGenerator.y(d => this.yScale(d.low));\n      let lows = this.lineGenerator(data);\n      this.setState({hights, lows})\n    }\n\n\n\n  render(){\n    return (\n      <div></div>\n      // <svg width={width} height={height}>\n      //   <path  stroke={red} d={this.state.hights} fill='none'/>\n      //   <path  stroke={blue} d={this.state.lows} fill='none'/>\n      // </svg>\n    );\n  }\n}\n\nexport default Chart;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Chart from './Chart';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Chart />\n  </React.StrictMode>,\n  document.getElementById('root-2')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\nserviceWorker.unregister();\n"],"sourceRoot":""}